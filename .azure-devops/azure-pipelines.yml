trigger: none

pool:
  vmImage: ubuntu-latest

jobs:
  - job: test_local
    displayName: Test local dev container definition
    steps:
    - script: |
        docker login -u $ACR_USERNAME -p $ACR_TOKEN $(ACR_NAME).azurecr.io
      displayName: 'Log in to Azure Container Registry'
      env:
        ACR_NAME: $(ACR_NAME)
        ACR_TOKEN: $(ACR_TOKEN)
        ACR_USERNAME: $(ACR_USERNAME)

    - script: |
        printenv | sort
      env:
        IMAGE_TAG: $(IMAGE_TAG)

    - task: DevcontainersCi@0
      inputs:
        imageName: '$(ACR_NAME).azurecr.io/devcontainers-ci/azdo-devcontainer-build-run-examples-acr'
        runCmd: 'echo $PWD'
        subFolder: '.'
        env: ''
        imageTag: $(IMAGE_TAG)
        sourceBranchFilterForPush: ''

  - job: test_run_args
    displayName: Test run-args
    steps:
    - script: |
        docker login -u $ACR_USERNAME -p $ACR_TOKEN $(ACR_NAME).azurecr.io
      displayName: 'Log in to Azure Container Registry'
      env:
        ACR_NAME: $(ACR_NAME)
        ACR_TOKEN: $(ACR_TOKEN)
        ACR_USERNAME: $(ACR_USERNAME)

    - task: DevcontainersCi@0
      inputs:
        imageName: '$(ACR_NAME).azurecr.io/devcontainers-ci/azdo-devcontainer-build-run/test/run-args'
        subFolder: github-tests/Dockerfile/run-args
        runCmd: echo $HOSTNAME && [[ $HOSTNAME == "my-host" ]]
        env: ''
        imageTag: $(IMAGE_TAG)
        sourceBranchFilterForPush: ''

  - job: test_env_vars_on_post_create
    displayName: Test env-vars-on-post-create
    steps:
    - script: |
        docker login -u $ACR_USERNAME -p $ACR_TOKEN $(ACR_NAME).azurecr.io
      displayName: 'Log in to Azure Container Registry'
      env:
        ACR_NAME: $(ACR_NAME)
        ACR_TOKEN: $(ACR_TOKEN)
        ACR_USERNAME: $(ACR_USERNAME)

    - task: DevcontainersCi@0
      env: # TEST_ENV_VALUE1 is set via devcontainer.json using a localEnv reference
        TEST_ENV_VALUE1: SetViaDevcontainerJsonLocalEnv
      inputs:
        imageName: '$(ACR_NAME).azurecr.io/devcontainers-ci/azdo-devcontainer-build-run/test/env-vars-on-post-create'
        subFolder: github-tests/Dockerfile/env-vars-on-post-create
        runCmd: |
          cat marker.txt
          cat marker.txt | grep 'post-create: TEST_ENV_VALUE1=SetViaDevcontainerJsonLocalEnv'
          cat marker.txt | grep 'post-create: TEST_ENV_VALUE2=AdditionalEnvVar'
        env: | # TEST_ENV_VALUE2 is an additional env var to pass to the container
            TEST_ENV_VALUE2=AdditionalEnvVar
        imageTag: $(IMAGE_TAG)
        sourceBranchFilterForPush: ''


  - job: test_simple
    displayName: Test simple
    steps:
    - task: DevcontainersCi@0
      inputs:
        subFolder: github-tests/Dockerfile/run-args
        runCmd: echo $HOSTNAME && [[ $HOSTNAME == "my-host" ]]
    - script: |
        echo "'runCmdOutput' value: $runCmdOutput"
        if [["$runCmdOutput" = *my-host*]]; then
          echo "'runCmdOutput' output of test_simple job doesn't contain expected value 'my-host'"
          exit 1
        fi

  - job: test_build_args
    displayName: Test build-args
    steps:
    - script: |
        docker login -u $ACR_USERNAME -p $ACR_TOKEN $(ACR_NAME).azurecr.io
      displayName: 'Log in to Azure Container Registry'
      env:
        ACR_NAME: $(ACR_NAME)
        ACR_TOKEN: $(ACR_TOKEN)
        ACR_USERNAME: $(ACR_USERNAME)

    - script: |
        printenv | sort
      env:
        IMAGE_TAG: $(IMAGE_TAG)

    - task: DevcontainersCi@0
      inputs:
        imageName: '$(ACR_NAME).azurecr.io/devcontainers-ci/azdo-devcontainer-build-run/test/build-args'
        subFolder: github-tests/Dockerfile/build-args
        runCmd: echo $BUILD_ARG_TEST && [[ $BUILD_ARG_TEST == "Hello build-args!" ]]
        env: ''
        imageTag: $(IMAGE_TAG)
        sourceBranchFilterForPush: ''

  - job: test_dockerfile_context
    displayName: Test Dockerfile context
    steps:
    - script: |
        docker login -u $ACR_USERNAME -p $ACR_TOKEN $(ACR_NAME).azurecr.io
      displayName: 'Log in to Azure Container Registry'
      env:
        ACR_NAME: $(ACR_NAME)
        ACR_TOKEN: $(ACR_TOKEN)
        ACR_USERNAME: $(ACR_USERNAME)

    - script: |
        printenv | sort
      env:
        IMAGE_TAG: $(IMAGE_TAG)

    - task: DevcontainersCi@0
      inputs:
        imageName: '$(ACR_NAME).azurecr.io/devcontainers-ci/azdo-devcontainer-build-run/test/dockerfile-context'
        subFolder: github-tests/Dockerfile/dockerfile-context
        runCmd: /tmp/dummy.sh
        env: ''
        imageTag: $(IMAGE_TAG)
        sourceBranchFilterForPush: ''

  - job: test_feature_docker_from_docker
    displayName: Test docker-from-docker using feature
    steps:
    - script: |
        docker login -u $ACR_USERNAME -p $ACR_TOKEN $(ACR_NAME).azurecr.io
      displayName: 'Log in to Azure Container Registry'
      env:
        ACR_NAME: $(ACR_NAME)
        ACR_TOKEN: $(ACR_TOKEN)
        ACR_USERNAME: $(ACR_USERNAME)

    - script: |
        printenv | sort
      env:
        IMAGE_TAG: $(IMAGE_TAG)

    - task: DevcontainersCi@0
      inputs:
        imageName: '$(ACR_NAME).azurecr.io/devcontainers-ci/azdo-devcontainer-build-run/test/feature-docker-from-docker'
        subFolder: github-tests/Dockerfile/feature-docker-from-docker
        runCmd: make docker-build
        env: ''
        imageTag: $(IMAGE_TAG)
        sourceBranchFilterForPush: ''

  - job: test_no_runCmd
    displayName: Test without runCmd
    steps:
    - task: DevcontainersCi@0
      inputs:
        subFolder: github-tests/Dockerfile/build-only

  # Temporarily commented out: https://github.com/devcontainers/ci/issues/198
  # - job: test_platform_with_runcmd
  #   displayName: Test with platform and runCmd
  #   steps:
  #   - script: |
  #       docker login -u $ACR_USERNAME -p $ACR_TOKEN $(ACR_NAME).azurecr.io
  #     displayName: 'Log in to Azure Container Registry'
  #     env:
  #       ACR_NAME: $(ACR_NAME)
  #       ACR_TOKEN: $(ACR_TOKEN)
  #       ACR_USERNAME: $(ACR_USERNAME)

  #   - script: |
  #       printenv | sort
  #     env:
  #       IMAGE_TAG: $(IMAGE_TAG)

  #   - script: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  #     displayName: Set up QEMU

  #   - script: docker buildx create --use
  #     displayName: Set up docker buildx

  #   - task: DevcontainersCi@0
  #     inputs:
  #       imageName: '$(ACR_NAME).azurecr.io/devcontainers-ci/azdo-devcontainer-build-run/test/platform-with-runcmd'
  #       subFolder: github-tests/Dockerfile/platform-with-runcmd
  #       platform: linux/amd64,linux/arm64
  #       runCmd: echo $HOSTNAME && [[ $HOSTNAME == "my-host" ]]

  #   - script: |
  #       echo "'runCmdOutput' value: $runCmdOutput"
  #       if [["$runCmdOutput" = *my-host*]]; then
  #         echo "'runCmdOutput' output of test_simple job doesn't contain expected value 'my-host'"
  #         exit 1
  #       fi