#
# This workflow contains the core logic to build, test and release the GitHub Action and Azure DevOps Task
# It is called via workflow_call from the pr-bot
#
name: 'build-test'
on: 
  workflow_call:
    inputs:
      prNumber:
        description: The PR number (if building for a PR)
        type: string
        required: false
      prRef:
        description: The git ref to checkout (e.g. the merge commit for a PR)
        type: string
        required: false
      prHeadSha:
        description: >-
          For PR builds (where GITHUB_REF would usually be set to the PR but isn't due to the pr-bot 
          running on a comment trigger), pass the PR's head SHA commit here
        type: string
        required: false
      runFullTests:
        description: true to run the full tests, false to run tests without credentials
        default: true
        type: boolean
        required: false
      release:
        type: boolean
        description: indicates whether to make a release
        default: false
        required: false
      AZDO_ORG:
        description: The AzDO org for AzDO task verification
        type: string
        required: false
        default: https://dev.azure.com/monacotools
      AZDO_PROJECT:
        description: The AzDO project for AzDO task verification
        type: string
        required: false
        default: Monaco
      AZDO_BUILD:
        description: The AzDO build to trigger for AzDO task verification
        type: string
        required: false
        default: devcontainers.ci
    secrets:
      AZDO_TOKEN:
        description: ""
        required: true
      MARKETPLACE_TOKEN:
        description: ""
        required: true

jobs:

  build: # run build using the github action!
    runs-on: ubuntu-latest
    name: build, test, package
    outputs:
      version_short: ${{ steps.build.outputs.version_short }}
      version: ${{ steps.build.outputs.version }}
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}
      image_push_option: ${{ steps.set_image_push_option.outputs.image_push_option }}
      build_number: ${{ steps.build_number.outputs.build_number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # if the following value is missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - id: set_image_push_option
        name: Set image push option
        uses: actions/github-script@v6
        with:
          script: |
            // if running full tests then use the filter option, for the dev container action
            // else, set to never to avoid pushing (as we're likely running without secrets)

            const pushOption = ${{ inputs.runFullTests }} ? 'filter' : 'never';
            console.log(`Setting image_push_option=${pushOption}`);
            core.setOutput("image_push_option", pushOption);
        
      - name: Login to GitHub Container Registry
        if: ${{ steps.set_image_push_option.outputs.image_push_option == 'filter' }}
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Previously, run_id was used as the patch number (BUILD_NUMBER)
      # but this got outside the limit for AzDO extensions (0 to 2147483647)
      - name: Generate build number
        id: build_number
        # only run this if we are going to run the AzDO publishing
        if: ${{ steps.set_image_push_option.outputs.image_push_option == 'filter' }}
        uses: einaregilsson/build-number@v3 
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: set_image_tag
        name: Set image_tag...
        uses: actions/github-script@v6
        env:
          PR_NUMBER: ${{ inputs.prNumber }}
        with:
          script: |
            const {PR_NUMBER} = process.env
            if (PR_NUMBER) {
              const prTag = `pr-${PR_NUMBER}`;
              console.log(`Setting image_tag=${prTag} for pull_request`);
              core.setOutput("image_tag", prTag);
              return;
            }
            if ((context.eventName === "push" || context.eventName === "workflow_dispatch") && context.ref === "refs/heads/main") {
              console.log("Setting image_tag=latest for push to main");
              core.setOutput("image_tag", "latest");
              return;
            }
            core.error('Failed to set image_tag');
            console.log(context);

      - name: Build in dev container
        uses: ./
        id: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_NUMBER: ${{ steps.build_number.outputs.build_number }}
          IS_PR: ${{ github.head_ref }}
          BRANCH: ${{ github.ref }}
        with:
          imageName: ghcr.io/devcontainers/ci-devcontainer
          imageTag: ${{ steps.set_image_tag.outputs.image_tag }} 
          runCmd: |
            echo "Starting"
            ./scripts/build-test-package.sh
          push: ${{ steps.set_image_push_option.outputs.image_push_option }}
          eventFilterForPush: |
            push
            pull_request
          env: |
            BUILD_NUMBER
            IS_CI=1
            IS_PR
            BRANCH

      - uses: actions/upload-artifact@v2
        name: Create dev AzDO VSIX artifact
        with:
          name: azdo-task-dev
          path: ./output/devcontainers-dev.ci-${{ steps.build.outputs.version }}.vsix
          if-no-files-found: error 

      - uses: actions/upload-artifact@v2
        name: Create release AzDO VSIX artifact
        with:
          name: azdo-task
          path: ./output/devcontainers.ci-${{ steps.build.outputs.version }}.vsix
          if-no-files-found: error 

  pr-checks:
    name: Mark PR checks as complete
    needs: # TODO - check what jobs need adding here
      - build
      - test-azdo
      - test-gh-run-args
      - test-gh-build-args
      - test-gh-dockerfile-context
      - test-gh-feature-docker-from-docker
      - test-gh-docker-from-docker-non-root
      - test-gh-docker-from-docker-root
      - test-gh-skip-user-update
      - test-compose-features
      - test-simple
      - test-no-run
    runs-on: ubuntu-latest
    if: ${{ inputs.prHeadSha }}
    steps:
      # For PR builds triggered from comment builds, the GITHUB_REF is set to main
      # so the checks aren't automatically associated with the PR
      # If prHeadSha is specified then explicity mark the checks for that SHA
      - name: Report check status
        if: ${{ inputs.prHeadSha }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # the name must be identical to the one received by the real job
          sha: ${{ inputs.prHeadSha }}
          name: "Build, test, publish / All succeeded"
          status: "completed"
          conclusion: "success"

  pr-succeeded:
    # simple no-op job to use as step for checks for PR checks
    name: All succeeded
    needs: # TODO - check what jobs need adding here
      - build
      - test-azdo
      - test-gh-run-args
      - test-gh-build-args
      - test-gh-dockerfile-context
      - test-gh-feature-docker-from-docker
      - test-gh-docker-from-docker-non-root
      - test-gh-docker-from-docker-root
      - test-gh-skip-user-update
      - test-compose-features
      - test-simple
      - test-no-run
    runs-on: ubuntu-latest
    steps:
      - name: Simple step
        run: |
          echo Done!

  release:
    name: Create release
    runs-on: ubuntu-latest
    needs: 
      - build
      - test-azdo
      - test-gh-run-args
      - test-gh-build-args
      - test-gh-dockerfile-context
      - test-gh-feature-docker-from-docker
      - test-gh-docker-from-docker-non-root
      - test-gh-docker-from-docker-root
      - test-gh-skip-user-update
      - test-compose-features
      - test-simple
      - test-no-run
    if: ${{ inputs.release == true }}
    env:
      VERSION: ${{ needs.build.outputs.version }}
      VERSION_SHORT: ${{ needs.build.outputs.version_short }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # if the following value is missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Download release VSIX
        uses: actions/download-artifact@v2
        with:
          name: azdo-task
          path: output

      - name: Show version
        run: |
          echo "VERSION: $VERSION"
          echo "VERSION_SHORT: $VERSION_SHORT"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        if: github.ref == 'refs/heads/main' # only need this for push (on `main`)
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION  }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: true

      - name: Create Major/Minor tag
        id: create_tag_short_verison
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION_SHORT: v${{ env.VERSION_SHORT }}
        run: |
          echo "VERSION_SHORT: $VERSION_SHORT"
          # sudo chown -R $(whoami) .
          git config user.name "CI build"
          git config user.email stuart@leeks.net
          git tag -fa $VERSION_SHORT -m $VERSION_SHORT
          git push -f origin $VERSION_SHORT

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./output/devcontainers.ci-${{ needs.build.outputs.version }}.vsix
          asset_name: devcontainers.ci-${{ needs.build.outputs.version }}.vsix
          asset_content_type: application/zip

      - name: Publish AzDO Task
        uses: ./
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AZDO_PROJECT: ${{ inputs.AZDO_PROJECT }}
          AZDO_BUILD: ${{ inputs.AZDO_BUILD }}
          AZDO_ORG: ${{ inputs.AZDO_ORG }}
          AZDO_TOKEN: ${{ secrets.AZDO_TOKEN }}
          AZURE_DEVOPS_EXT_PAT: ${{ secrets.AZDO_TOKEN }}
          MARKETPLACE_TOKEN: ${{ secrets.MARKETPLACE_TOKEN }}
          BUILD_NUMBER: ${{ github.run_id }}
          IS_PR: ${{ github.head_ref }}
          BRANCH: ${{ github.ref }}
        with:
          imageName: ghcr.io/devcontainers/ci-devcontainer
          runCmd: |
            echo "Starting"
            ./scripts/publish-azdo-task.sh
          env: |
            BUILD_NUMBER
            IS_CI=1
            IS_PR
            BRANCH
            AZDO_TOKEN
            AZURE_DEVOPS_EXT_PAT
            AZDO_ORG
            AZDO_PROJECT
            AZDO_BUILD
            MARKETPLACE_TOKEN

  #
  # Jobs to test
  #
  # When adding a new test:
  # - add to the 'needs' section for the 'pr-succeeded', 'pr-checks' and 'releases' jobs
  # - add any new images to the image_names in clean_tags.sh
  # - review the Azure DevOps pipeline and consider adding there for verification
  #

  test-azdo:
    name: Run AzDO test
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.outputs.image_push_option == 'filter' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          # if the following value is missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Show version
        env:
          VERSION: ${{ needs.build.outputs.version }}
          VERSION_SHORT: ${{ needs.build.outputs.version_short }}
        run: |
          echo "VERSION: $VERSION"
          echo "VERSION_SHORT: $VERSION_SHORT"

      - name: Download workflow artifacts
        uses: actions/download-artifact@v2
        with:
          path: output

      - name: Download release VSIX
        uses: actions/download-artifact@v2
        with:
          name: azdo-task-dev
          path: output

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        if: github.ref == 'refs/heads/main' # only need this for push (on `main`)
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run AzDO test pipeline
        uses: ./
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AZDO_PROJECT: ${{ inputs.AZDO_PROJECT }}
          AZDO_BUILD: ${{ inputs.AZDO_BUILD }}
          AZDO_ORG: ${{ inputs.AZDO_ORG }}
          AZDO_TOKEN: ${{ secrets.AZDO_TOKEN }}
          AZURE_DEVOPS_EXT_PAT: ${{ secrets.AZDO_TOKEN }}
          MARKETPLACE_TOKEN: ${{ secrets.MARKETPLACE_TOKEN }}
          BUILD_NUMBER: ${{ github.run_id }}
          IS_PR: ${{ github.head_ref }}
          BRANCH: ${{ github.ref }}
          IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
        with:
          imageName: ghcr.io/devcontainers/ci-devcontainer
          runCmd: |
            echo "Starting"
            ./scripts/test-azdo.sh
          env: |
            BUILD_NUMBER
            IMAGE_TAG
            IS_CI=1
            IS_PR
            BRANCH
            AZDO_TOKEN
            AZURE_DEVOPS_EXT_PAT
            AZDO_ORG
            AZDO_PROJECT
            AZDO_BUILD
            MARKETPLACE_TOKEN


  test-simple:
    name: Run simple test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          # if the following value is missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Run test
        uses: ./
        id: simpletest
        with:
          subFolder: github-tests/Dockerfile/run-args
          runCmd: echo $HOSTNAME && [[ $HOSTNAME == "my-host" ]]
      - name: Validate runCmdOutput output
        run: |
          echo "'runCmdOutput' value: $runCmdOutput"
          if [["$runCmdOutput" = *my-host*]]; then
            echo "'runCmdOutput' output of simpletest step doesn't contain expected value 'my-host'"
            exit 1
          fi
        env:
          runCmdOutput: ${{ steps.simpletest.outputs.runCmdOutput }}

  test-gh-run-args:
    name: Run GitHub run-args test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          # if the following value is missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        if: ${{ needs.build.outputs.image_push_option == 'filter' }}
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run test
        uses: ./
        with:
          subFolder: github-tests/Dockerfile/run-args
          imageName: ghcr.io/devcontainers/ci/tests/run-args
          runCmd: echo $HOSTNAME && [[ $HOSTNAME == "my-host" ]]
          imageTag: ${{ needs.build.outputs.image_tag }}
          push: ${{ needs.build.outputs.image_push_option }}
          eventFilterForPush: |
            push
            pull_request

  test-gh-build-args:
    name: Run GitHub build-args test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          # if the following value is missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: ${{ needs.build.outputs.image_push_option == 'filter' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run test
        uses: ./
        with:
          subFolder: github-tests/Dockerfile/build-args
          imageName: ghcr.io/devcontainers/ci/tests/build-args
          runCmd: echo $BUILD_ARG_TEST && [[ $BUILD_ARG_TEST == "Hello build-args!" ]]
          imageTag: ${{ needs.build.outputs.image_tag }}
          push: ${{ needs.build.outputs.image_push_option }}
          eventFilterForPush: |
            push
            pull_request

  test-gh-dockerfile-context:
    name: Run GitHub dockerfile-context test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          # if the following value is missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: ${{ needs.build.outputs.image_push_option == 'filter' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run test
        uses: ./
        with:
          subFolder: github-tests/Dockerfile/dockerfile-context
          imageName: ghcr.io/devcontainers/ci/tests/dockerfile-context
          runCmd: /tmp/dummy.sh
          imageTag: ${{ needs.build.outputs.image_tag }}
          push: ${{ needs.build.outputs.image_push_option }}
          eventFilterForPush: |
            push
            pull_request

  test-gh-feature-docker-from-docker:
    name: Run GitHub feature-docker-from-docker test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          # if the following value is missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: ${{ needs.build.outputs.image_push_option == 'filter' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run test
        uses: ./
        with:
          subFolder: github-tests/Dockerfile/feature-docker-from-docker
          imageName: ghcr.io/devcontainers/ci/tests/feature-docker-from-docker
          runCmd: make docker-build
          imageTag: ${{ needs.build.outputs.image_tag }}
          push: ${{ needs.build.outputs.image_push_option }}
          eventFilterForPush: |
            push
            pull_request

  test-gh-docker-from-docker-non-root:
    name: Run GitHub docker-from-docker-non-root test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          # if the following value is missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: ${{ needs.build.outputs.image_push_option == 'filter' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run test
        uses: ./
        with:
          subFolder: github-tests/Dockerfile/docker-from-docker-non-root
          imageName: ghcr.io/devcontainers/ci/tests/docker-from-docker-non-root
          runCmd: make docker-build
          imageTag: ${{ needs.build.outputs.image_tag }}
          push: ${{ needs.build.outputs.image_push_option }}
          eventFilterForPush: |
            push
            pull_request

  test-gh-docker-from-docker-root:
    name: Run GitHub docker-from-docker-root test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          # if the following value is missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: ${{ needs.build.outputs.image_push_option == 'filter' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run test
        uses: ./
        with:
          subFolder: github-tests/Dockerfile/docker-from-docker-root
          imageName: ghcr.io/devcontainers/ci/tests/docker-from-docker-root
          runCmd: make docker-build
          imageTag: ${{ needs.build.outputs.image_tag }}
          push: ${{ needs.build.outputs.image_push_option }}
          eventFilterForPush: |
            push
            pull_request

  test-gh-skip-user-update:
    name: Run GitHub skipContainerUserIdUpdate test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          # if the following value is missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        if: ${{ needs.build.outputs.image_push_option == 'filter' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run test
        uses: ./
        with:
          subFolder: github-tests/Dockerfile/skip-user-update
          imageName: ghcr.io/devcontainers/ci/tests/skip-user-update
          skipContainerUserIdUpdate: true
          runCmd: |
            echo "Get user/group info ..."
            user_id=$(id -u $(whoami))
            echo "User ID: $user_id"
            group_id=$(id -g $(whoami))
            echo "Group ID: $group_id"
            [[ $user_id == 1000 ]] && [[ $group_id == 1000 ]]
          imageTag: ${{ needs.build.outputs.image_tag }}
          push: ${{ needs.build.outputs.image_push_option }}
          eventFilterForPush: |
            push
            pull_request


  test-compose-features:
    name: Run GitHub docker-compose with features test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          # if the following value is missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: ${{ needs.build.outputs.image_push_option == 'filter' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run test
        uses: ./
        with:
          subFolder: github-tests/docker-compose/features
          imageName: ghcr.io/devcontainers/ci/tests/compose-features
          runCmd: go version
          imageTag: ${{ needs.build.outputs.image_tag }}
          push: ${{ needs.build.outputs.image_push_option }}
          eventFilterForPush: |
            push
            pull_request

  test-no-run:
    name: Run test without runCmd
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          # if the following value is missing (i.e. not triggered via comment workflow)
          # then the default checkout will apply
          ref: ${{ inputs.prRef }}

      - name: Run test
        uses: ./
        with:
          subFolder: github-tests/Dockerfile/build-only
